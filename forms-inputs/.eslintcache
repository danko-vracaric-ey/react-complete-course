[{"C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\index.js":"1","C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\App.js":"2","C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\components\\SimpleInput.js":"3","C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\hooks\\use-input.js":"4","C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\components\\BasicForm.js":"5","C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\hooks\\use-input2.js":"6"},{"size":179,"mtime":1648643022000,"results":"7","hashOfConfig":"8"},{"size":243,"mtime":1659079367370,"results":"9","hashOfConfig":"8"},{"size":4113,"mtime":1659019826880,"results":"10","hashOfConfig":"8"},{"size":764,"mtime":1659011812024,"results":"11","hashOfConfig":"8"},{"size":1609,"mtime":1659088515864,"results":"12","hashOfConfig":"8"},{"size":1829,"mtime":1659090864191,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"wvbzbf",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\index.js",[],["29","30"],"C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\App.js",["31"],"import SimpleInput from \"./components/SimpleInput\";\nimport BasicForm from \"./components/BasicForm\";\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <SimpleInput /> */}\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\components\\SimpleInput.js",["32"],"import { useEffect, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    isValid: enteredNameIsValid,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n  // const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // const [formIsValid, setFromIsValid] = useState(false);\n  //2 ways to fetch entered value of user input\n  //1 Listen on every keystroke and store to a state var, or useRef when user is done with typing\n  // console.log(enteredName, typeof enteredName);\n  // const enteredNameIsValid = enteredName.trim() !== \"\";\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid =\n    enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    // enteredNameIsValid && enteredageIsValid etc\n    formIsValid = true;\n  }\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n  // };\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  //   console.log(\"Dogadjam se\");\n  // };\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n    // setEnteredEmailTouched(false);\n  };\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    // setEnteredNameTouched(true);\n    if (!enteredNameIsValid) {\n      return;\n    }\n    if (!enteredEmailIsValid) {\n      return;\n    }\n    resetNameInput();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  }; // on event you should call prevent default to stop reload, if a form is submitted with button inside of form, sends http reqest is send to the server\n  // console.log(enteredName);\n  // console.log(nameInputRef.current.value);\n  // const enteredValue = nameInputRef.current.value; // acces input element .current\n  // CLEARING INPUT XX - setEnteredName(\"  \");\n  // CLEARING INPUT XX - nameInputRef.current.value = \"\"; it works but is not ideal\n  //here we don't want that behavior\n\n  // if you are only interested in value once, then ref, for instant validation - state, or to reset the entered input, setEnteredName(\"\")\n\n  //ADDING BASIC VALIDATION - NOT ALLOWING EMPTY LOGS TO BE SEND, CLIENT SIDE IS NOT ENOUGH, IT\"S NOT SECURITY MECHANISM\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler} // on Blur Fires when input loses focus\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">Your Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler} // on Blur Fires when input loses focus\n          value={enteredEmail}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Email must be valid email form</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\hooks\\use-input.js",[],"C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\components\\BasicForm.js",["33"],"C:\\Users\\HV485VX\\JulyN\\react-complete-course\\forms-inputs\\src\\hooks\\use-input2.js",["34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":19},{"ruleId":"39","severity":1,"message":"43","line":1,"column":10,"nodeType":"41","messageId":"42","endLine":1,"endColumn":19},{"ruleId":"39","severity":1,"message":"44","line":6,"column":26,"nodeType":"41","messageId":"42","endLine":6,"endColumn":44},{"ruleId":"39","severity":1,"message":"45","line":1,"column":10,"nodeType":"41","messageId":"42","endLine":1,"endColumn":18},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'isEnteredNameValid' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]